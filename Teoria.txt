-----TEORIA-----

nome = "jessica" #a string é um containner imutavel de char
nome[0] = "j"
len nome  #tamanho do container
> 7 
"i" in nome  #verifica se 'i' está em nome
>True
nome [0 : 3] #pega determinados elementos do container
>"jes" #pega o 0, 1 e 2
nome [ :4] # do inicio ate o 4, sem o 4
>"jess"
nome [3 : ] #do 3 ate o final
>"sica"
nome [0 : 7 : 2] #pega de 0 a 7 pulando de 2 em 2
>"jsia"
nome [ 0 : 7 : -1 ] #pega de 0 a 7 de trás para frente
>"acissej"

primos (2, 3, 5, 7, 11, 13) #tupla - arquivo imutavel
tupla ("ana", 3, 2, True) #pode misturar tipos

#todo elemento possui um indice positivo (iniciado em 0) e um negativo (iniciado em -1)
primos [ len(nome)-1 ] #chama o ultimo elemento
>13
primos [-1] #chama o ultimo elemento
>13
primos [-2] #chama o penultimo 
>11


18 // 4 #mostra o quociente da divisão
> 4
18 % 4 #mostra o resto da divisão
> 2
18 / 4 #mostra o resultado da divisão
> 4.5

#uso do continue 
primos = (2, 3, 5, 7)
for j in primos :
  if j == 3 : 
    continue 
  print(j)
> 2  > 5  > 7

#tuplas

x, y, z = (1, 2, 3)
>> x
1
>> y 
2
>> z
3

#tornar um return de dois objetos em um retorno de apenas um
def varios () : 
  return (10, 20)
v1, v2 = varios()
>> v1
10 
>> v2
20

#Importações

import math as ma #define a biblioteca com outro nome
math.pi => ma.pi
>>3.14 ...

from math import pi #importa um determinado elemento (pi) da biblioteca (math)
from math import * #importa todos os elementos de math



#listas podem conter elementos de varios tipos
>>> dados = [5, "jessica", True, 3.1415, (4,7,9) ]
>>> type (dados)
<class 'list'>
>>> dados [0]
5
>>> dados [3]
3.1415

#tendo uma tupla na lista pode-se escolhendo um de seus elementos dando o indice da tupla com o indice do elemento
>>> dados [4]
(4, 7, 9)
>>> dados [4] [1]
7

# o msm vale para strings dentro de listas
>>> dados [1] [0]
'j'

# o del apaga um dos elementos da lista
>>> del dados [2]
>>> dados
[5, 'jessica', 3.1415, (4, 7, 9)]

# é possivel modificar os elementos 
>>> dados [0] = 'carol'
>>> dados
['carol', 'jessica', 3.1415, (4, 7, 9)]

# uso de fatia em lista
>>> v = [1,2,3,4,5,6,7]
>>> v
[1, 2, 3, 4, 5, 6, 7]
>>> v [1:]
[2, 3, 4, 5, 6, 7]
>>> v [1:5]
[2, 3, 4, 5]

#pega os elementos do indice 0 ao 7, de dois em dois
>>> v [0 : 7 : 2] 
[1, 3, 5, 7]

#atribuindo valores novos a lista
>>> v [1 : 4] = [-7, -8, -9]  
>>> v
[1, -7, -8, -9, 5, 6, 7]

#é possivel atribuir mais ou menos valores do que originalmente o array possuia
>>> b = [10,20,30, 40, 50]
>>> b [1:3] = [12,14, 243, 5432, 34] 
>>> b
[10, 12, 14, 243, 5432, 34, 40, 50]

#mudando os elementos de dois em dois indices
>>> b [0 : 9 : 2] 
[10, 14, 5432, 40]
>>> b [0 : 9 : 2] = [5, 4, 3, 2]  
>>> b
[5, 12, 4, 243, 3, 34, 2, 50]

#removendo elementos da lista, substituindo por lista vazia
>>> b [0: 3] = []
>>> b
[243, 3, 34, 2, 50]

# Criando uma copia de lista

>>> v
[1, -7, -8, -9, 5, 6, 7]
>>> copiav = v 
#copiav apontara para o mesmo objeto de v
>>> copiav
[1, -7, -8, -9, 5, 6, 7]
>>> copiav [0] = 14
# mudará a posição 0 do objeto apontado, portando mudará em v e copiav
>>> copiav
[14, -7, -8, -9, 5, 6, 7]
>>> v
[14, -7, -8, -9, 5, 6, 7]
>>> del v [2]
# o msm ocorre se trocar algum elemento de v, mudará em copiav
>>> v
[14, -7, -9, 5, 6, 7]
>>> copiav
[14, -7, -9, 5, 6, 7]

# gerando copia rasa:
>>> l1 =[1,2,3]
>>> l2 = l1[:]
# os apontadores de l2 apontam para os msm objetos de l1, sendo assim eles são apontados por dois apontadores 
>>> l1
[1, 2, 3]
>>> l2
[1, 2, 3]
>>> l1 [0] = 3
#dessa forma, se alterar um, apenas ele será alterado
>>> l1
[3, 2, 3]
>>> l2
[1, 2, 3]
# esse modelo de copia rasa funciona bem para elementos imutaveis


# para saber se apontam para o msm objeto usasse a função 'is'
>>> v is copiav
True
>>> l1 is l2
False
#igualando o resultado será True, pois ambos são iguais apesar de não apontar para o msm objeto, pois apontam para objetos iguais
>>> l1 == l2
True

# em uma lista com lista dentro a copia rasa não será o bastante
>>> l3 = [7, [4, 5] ]
>>> len (l3) #tamanho de l3
2
>>> l3
[7, [4, 5]]
>>> len (l3[1]) #tamanho da lista dentro de l3, na posição 1
2
#criando a lista rasa
>>> l4 = l3[:]
>>> l3
[7, [4, 5]]
>>> l4
[7, [4, 5]]
#comparando se os elementos apontam para o mesmo objeto
>>> l3 is l4
False
#mudando um elemento
>>> l3 [1] [0] = 11
>>> l3
[7, [11, 5]]
>>> l4
[7, [11, 5]]
#é alterado em ambas as listas

>>> import copy #importa a função copy (copia profunda)
>>> L3 = [7, [4, 5]]
>>> L4 = copy.deepcopy(L3)
>>> L3
[7, [4, 5]]
>>> L4
[7, [4, 5]]

# diferentes copias raras
>>> L1 = [1,2,3]
>>> L2 = [3,4,5]
# por concatenação de duas listas
>>> L3 = L1 + L2
>>> L3
[1, 2, 3, 3, 4, 5]
#contatenação com lista vazia
>>> L4 = L1 + []
>>> L4
[1, 2, 3]
# multiplicação de um lista por 1
>>> L4 * 2
[1, 2, 3, 1, 2, 3]
>>> L5 = L4 * 1
>>> L5
[1, 2, 3]

# A função 'list' transforma um elemento em uma lista
>>> nome = "jessica"
>>> lnome = list(nome)
>>> lnome
['j', 'e', 's', 's', 'i', 'c', 'a']
#transformando uma string em uma lista é possivel alterar seus elementos, o que não seria possivel com a a string
>>> lnome [0] = 'G'
>>> lnome
['G', 'e', 's', 's', 'i', 'c', 'a'] 

#transformando em string
>>> name = "".join(lnome)
>>> name
'Geçyka'

#Acresentando um novo elemento
>>> L1
[1, 2, 3]
>>> L1.append(7000)
>>> L1
[1, 2, 3, 7000]

#deletando o ultimo elemento
>>> L1.pop()
7000
>>> L1
[1, 2, 3]
>>> L1.pop(0)
1
>>> L1
[2, 3]

#contando a quantidade de certo elemento na lista
>>> L = [7, 2, 1, 7, 7, 7, 0, 7]
>>> L.count (2)
1
>>> L.count(7)
5
>>> L.count(-99)
0

#procurando um elemento, retorna sua posição
>>> L.index(1)
2

#ordenando os elementos
>>> L=[2,5,3,6,7,4]
>>> L.sort()
>>> L
[2, 3, 4, 5, 6, 7]

#ordenando decresentemente 
>>> L[::-1]
[7, 6, 5, 4, 3, 2]
>>> L=[22,5,6,2,1,3]
>>> L.sort(reverse = True)
>>> L
[22, 6, 5, 3, 2, 1]


# Dicionario
>>> duni = { 1: "UFU", 2: "UFRJ", 5: "UMICH" }
>>> duni 
{ 1: "UFU", 2: "UFRJ", 5: "UMICH" }
>>> duni [1]
'UFU'
>>> duni [3]
ERROR
>>> d2 = { "oi" : [1,2,3], 'tchau' : { 'nome' : 'caio'} }
>>> d2
{ "oi" : [1,2,3], 'tchau' = { 'nome' : 'caio'} }

# acresentando elementos no Dicionario
>>> duni [4] = "FIOCRUZ"
{ 1: "UFU", 2: "UFRJ", 5: "UMICH", 4: "FIOCRUZ" }
# trocando elemento
>>> duni [5] = "FIOCRUZ"
>>> duni
{1: 'UFU', 2: 'UFRJ', 5: 'FIOCRUZ', 4: 'HARVARD'}
# deletando elemento
>>> del duni [5]
>>> duni
{1: 'UFU', 2: 'UFRJ', 4: 'HARVARD'}
# o 'in' verifica apenas se o elemento é chave não item.
>>> "UFU" in duni
False
>>> 1 in duni
True
# funções 
>>> d2
{'oi': [1, 2, 3], 'tchau': {'nome': 'caio'}}
>>> d2.keys()
dict_keys(['oi', 'tchau'])
>>> d2.values()
dict_values([[1, 2, 3], {'nome': 'caio'}])
# printando chaves
>>> for elemento in duni.keys() :
  print (elemento)
1
2
4
>>> for v in duni :
  print (v)
1
2
4
# printando elementos
>>> for elemento in duni.values() :
  print (elemento)
UFU
UFRJ
HARVARD
